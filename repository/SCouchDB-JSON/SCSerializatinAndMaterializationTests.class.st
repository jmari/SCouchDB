Class {
	#name : #SCSerializatinAndMaterializationTests,
	#superclass : #TestCase,
	#category : #'SCouchDB-JSON-Tests'
}

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testDictionaryOfObject2 [
	| data json dictionaryOfObjects |
	data := Dictionary new.
	data 
		at: 'one' put: NeoJSONTestObject2 example1;
		at: 'two' put: NeoJSONTestObject2 example1.
	json := SCSerializer serialize: data.
	SCObjectsCache instance flush.
	dictionaryOfObjects := SCMaterializer  materializeFrom: json readStream.
 	
	"keeps _id we dont know if ther was or it was generated by the serializer"
	self 
		assert: (dictionaryOfObjects removeKey:#_id;yourself)
		equals: data
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testFloats [
	| objects |
	objects := OrderedCollection new add: Float pi; add: 1.0; add: -1.0; add: 0.0; add: 1.5e6; add: -1.5e6; add: 1.5e-6; add: -1.5e-6; yourself.
	(self writeRead: objects) 
		with: objects 
		do: [ :first :second | self assert: (first closeTo: second) ]
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testIntegers [
	| objects |
	objects := Array with: 1 with: -1 with: 0 with: 123467890 with: -1234567890.
	self 
		assert: (self writeRead: objects)
		equals: objects
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testLists [
	| objects |
	objects := Array with: #(1 2 3) with: #() with: #( 'foo' 'bar').
	self 
		assert: (self writeRead: objects)
		equals: objects
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testMaps [
	| objects |
	objects := Array 
		with: Dictionary new
		with: (Dictionary with: 'x' -> 1)
		with: (Dictionary newFromPairs: #( 'foo' true 'bar' false 'zero' 0 'null' nil 'string' 'Hello World!' )).
	self 
		assert: ((self writeRead: objects) collect:[:o| o removeKey:#_id;yourself])
		equals: objects
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testObject1 [
	| json |
	json := SCSerializer serialize: NeoJSONTestObject1 example1.
	SCObjectsCache instance flush.
	self 
		assert: (SCMaterializer materializeFrom: json readStream)
		equals: NeoJSONTestObject1 example1
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testObject2 [
	| json |
	json := SCSerializer serialize: NeoJSONTestObject2 example1.
	SCObjectsCache instance flush.
	self 
		assert: (SCMaterializer materializeFrom: json readStream)
		equals: NeoJSONTestObject2 example1
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testObject3 [
	| json |
	json := SCSerializer serialize: NeoJSONTestObject3 example1.
	SCObjectsCache instance flush.
	self 
		assert: (SCMaterializer materializeFrom: json readStream)
		equals: NeoJSONTestObject3 example1
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testSpecials [
	| objects |
	objects := Array with: true with: false with: nil.
	self 
		assert: (self writeRead: objects)
		equals: objects
]

{ #category : #testing }
SCSerializatinAndMaterializationTests >> testStrings [
	| objects |
	objects := OrderedCollection new
		add: 'foo'; add: 'Foo BAR'; add: ''; add: '	\\'''; 
		add: 'élève en Français';
		add: (Character codePoint: 12354) asString; "HIRAGANA LETTER A" 
		yourself;
		asArray.
	self 
		assert: (self writeRead: objects)
		equals: objects
]

{ #category : #private }
SCSerializatinAndMaterializationTests >> writeRead: object [
	| json |
	json := String streamContents: [ :stream |(SCSerializer serialize:object to:stream)].
	SCObjectsCache instance flush. "empty cache to get the real serialized object nor the cached object"
	^ (SCMaterializer materializeFrom: json readStream) 
]
